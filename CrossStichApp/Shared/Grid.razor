@using CrossStitchApp.Models
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@inject HttpClient Http

<input @bind-value="Rows"/>
<input @bind-value="Cols"/>
<input @bind-value="Size"/>
<button class="btn btn-primary" @onclick="Display">Display</button>
<BECanvas Width="300" Height="400" @ref="canvasReference" ></BECanvas>

@code {
    [Parameter]
    public int Cols {get; set;} = 10;

    [Parameter]
    public int Rows {get; set;} = 10;

    [Parameter]
    public int Size {get; set;} = 30;

    private GridViewModel grid;

    private Canvas2DContext context;

    protected BECanvasComponent canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            context = await canvasReference.CreateCanvas2DAsync();

            await context.SetLineWidthAsync(2);
            await context.SetFillStyleAsync($"black");
        }
    }

    public async Task Display()
    {
        grid = new GridViewModel(Rows, Cols);
        await context.ClearRectAsync(0, 0, canvasReference.Width, canvasReference.Height);
        await context.BeginBatchAsync();
        foreach(var cell in grid.Cells)
        {
            var x = cell.Position.X * Size;
            var y = cell.Position.Y * Size;

            if(x > canvasReference.Width || y > canvasReference.Height) continue;

            var style = $"rgb({cell.Color.R}, {cell.Color.G}, {cell.Color.B})";
            await context.SetFillStyleAsync(style);
            await context.FillRectAsync(x, y, Size, Size);
            await context.StrokeRectAsync(x, y, Size, Size);
        }
        await context.EndBatchAsync();
    }
}